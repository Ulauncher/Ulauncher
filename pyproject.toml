[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "ulauncher"
description = "Application launcher for Linux"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "GPL-3"}
authors = [
  {name = "Aleksandr Gornostal"},
  {name = "Albin Larsson"},
  {name = "Troy Curtis"},
]
urls.Homepage = "http://ulauncher.io/"
urls.Documentation = "https://docs.ulauncher.io/"
urls.Repository = "https://github.com/Ulauncher/Ulauncher.git"
urls.Issues = "https://github.com/Ulauncher/Ulauncher/issues"
keywords = [ "linux", "desktop", "application", "launcher", "gtk" ]
dependencies = [ "PyGObject", "pycairo", "python-xlib" ]
dynamic = ["version"]

[tool.setuptools.dynamic]
version = {attr = "ulauncher.version"}

[tool.mypy]
python_version = "3.8"
strict = true
disable_error_code = "import-untyped"
implicit_reexport = true
disallow_untyped_calls = false

[tool.pylint.MASTER]
ignore-patterns="ulauncher,docs,data,scripts,tests"

[tool.pylint."MESSAGES CONTROL"]
disable="all"

[tool.typos.default]
extend-ignore-re = [
  # prevent correcting gir to git
  "gir1.2",
]

[tool.typos.files]
extend-exclude = ["preferences-src/static"]

[tool.ruff]
line-length = 120
target-version = "py37" # py37 is the lowest supported option

[tool.ruff.lint]
pylint = { max-args = 10}
flake8-builtins = { builtins-ignorelist = ["id"] }
flake8-pytest-style = {fixture-parentheses = false}
ignore = [
  "A003",     # Allow using same names as python internals for class methods that doesn't shadow global scope
  "PERF203",  # Useless rule. Python 3.11 introduced "zero-cost" exception handling and there is no alternative if you want to continue iterating yet ignore errors. 
  "PLC0415",  # Allow imports outside of top-level for performance reasons
  "PYI019",   # Don't want to require typing_extensions and/or py 3.11
  "RUF012",   # Mostly false positives because we're deep cloning class vars when creating instances in our custom data class
  "TC001", "TC002", "TC003", # Performance best practice that does nothing for our use
  "TD002", "TD003" # Allow TODOs and FIXMEs without author and link
]
# Updated to support all standard rules as of ruff 0.12.0
# See https://docs.astral.sh/ruff/rules/
select = [
  "A",        # flake8-builtins
  "ANN204",   # flake8-annotations (204 covers __init__, __new__, and __call__. All the other rules are covered by mypy)
  "ARG",      # flake8-unused-arguments
  "ASYNC",    # flake8-async
  "B",        # flake8-bugbear
  "BLE",      # flake8-blind-except
  "C4",       # flake8-comprehensions
  # "COM",    # flake8-commas (we use ruff format instead)
  # "CPY",    # flake8-copyright (enforces copyright headers in python files)
  # "DTZ",    # flake8-datetimez (too focused on enforcing time zone argument, which we don't need)
  # "D",      # pydocstyle (validates, formats and enforces docstrings)
  # "DOC",    # pydoclint (enabling this will show a warning because all the rules require preview)
  "E",        # pycodestyle errors
  "EM",       # flake8-errmsg
  "ERA",      # eradicate (commented-out-code)
  "EXE",      # flake8-executable
  "F",        # pyflakes
  "FA",       # flake8-future-annotations
  # "FBT",    # flake8-boolean-trap (opinionated and annoying)
  # "FIX",    # flake8-fixme (forbids fixme comments)
  "FLY",      # flynt
  "FURB",     # refurb
  "G",        # flake8-logging-format
  "I",        # isort
  "ICN",      # flake8-import-conventions
  "INP",      # flake8-no-pep420 (ban implicit namespace packages without __init__.py)
  "INT",      # flake8-gettext
  "ISC",      # flake8-implicit-str-concat
  "LOG",      # flake8-logging
  "N",        # pep8-naming
  "PERF",     # perflint
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint (same as PLC+PLE+PLR+PLW)
  "PT",       # flake8-pytest-style
  # "PTH",    # flake8-use-pathlib (pathlib isn't better for simple use cases)
  "PYI",      # flake8-pyi
  "RET",      # flake8-return
  "RSE",      # flake8-raise
  "RUF",      # Ruff-specific rules
  # "S",      # flake8-bandit (assumes you are writing a web server and that all params you use with subshells etc are untrusted input)
  "SLF",      # flake8-self
  "SLOT",     # flake8-slots
  "SIM",      # flake8-simplify
  "T10",      # flake8-debugger
  "T20",      # flake8-print
  "TC",       # flake8-type-checking
  "TD",       # flake8-todos
  "TID",      # flake8-tidy-imports
  "TRY",      # tryceratops
  "UP",       # pyupgrade
  "W",        # pycodestyle warnings
  "Q",        # flake8-quotes
  "YTT",      # flake8-2020
]
per-file-ignores = {"tests/**/*.py" = [ # Relax some linting rules for tests
  "PLR2004",    # Allow direct comparison with integers (magic-value)
  "SLF001",     # Allow accessing private members (obj._hello)
  "T201",       # Allow print statements
]}

[tool.pytest.ini_options]
log_cli = true

